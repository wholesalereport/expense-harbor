generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id // Primary key
  firstName String? // Optional first name
  lastName  String? // Optional last name
  email     String?  @unique // Optional and unique email for the user
  reports   Report[] // One-to-many relationship with Report

  createdAt     DateTime        @default(now()) // Automatically set when created
  updatedAt     DateTime        @updatedAt // Automatically updated when modified
  PaymentIntent PaymentIntent[]
}

model Report {
  id         String          @id @default(uuid()) // UUID as primary key
  userId     String // Foreign key referencing User
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  tierId     String // Tier ID attribute for the report
  totalLines Int // Total lines attribute
  status     ReportStatus    @default(pending) // Status of the report
  payments   PaymentIntent[] // One-to-many relationship with payment intents
  createdAt  DateTime        @default(now()) // Automatically set when created
  updatedAt  DateTime        @updatedAt // Automatically updated when modified
  deletedAt  DateTime? // Soft delete field
}

model PaymentIntent {
  id              String              @id
  amount          Int
  currency        String
  paymentMethodId String?
  userId          String
  reportId        String
  report          Report              @relation(fields: [reportId], references: [id], onDelete: Cascade)
  status          PaymentIntentStatus @default(requires_payment_method) // Enum for payment status
  User            User                @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ReportStatus {
  pending
  in_progress
  complete
  deleted
  open
}

enum PaymentIntentStatus {
  requires_payment_method
  requires_confirmation
  requires_action
  processing
  requires_capture
  canceled
  succeeded
}
